{"version":3,"sources":["components/Button/Button.js","components/LogsList/LogObj.js","components/LogsList/AddLog.js","components/LogsList/LogsDetail.js","components/LogsList/Log.js","components/LogsList/Logs.js","components/LogsList/Pagination.js","components/LogsList/LogsPages.js","App.js","reportWebVitals.js","index.js"],"names":["Button","props","className","size","onClick","disabled","name","LogObj","userId","title","body","this","AddLog","useState","enteredTitle","setEnteredTitle","enteredBody","setEnteredBody","enteredUserId","setEnteredUserId","submitedSuccess","setSubmitedSuccess","formValid","setFormValid","error","setError","formValidation","addLogToServer","log","a","fetch","method","JSON","stringify","headers","then","response","json","resp","onSubmit","event","preventDefault","Log","to","htmlFor","type","id","onChange","target","value","onBlur","LogsDetail","useParams","setLog","useEffect","getLog","fetchLog","LogFromServer","res","data","style","flexGrow","Id","Title","Logs","logs","map","UserId","Body","Pagination","logsPerPage","totalLogs","paginate","pageNumbers","i","Math","ceil","push","number","LogsPages","setLogs","currentPage","setCurrentPage","getLogs","fetchLogs","logsFromServer","indexOfLastLog","indexOfFirstLog","currentLogs","slice","length","pageNumber","App","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.105f9788.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Button.css\";\r\n\r\nconst Button = (props) => {\r\n  return (\r\n    <button\r\n      className={props.size}\r\n      onClick={props.onClick}\r\n      disabled={props.disabled}\r\n    >\r\n      {props.name}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","export class LogObj {\r\n  constructor(userId, title, body) {\r\n    this.userId = userId;\r\n    this.title = title;\r\n    this.body = body;\r\n  }\r\n}\r\nexport default LogObj;\r\n","import { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Button from \"../Button/Button\";\r\nimport { LogObj } from \"./LogObj\";\r\nimport \"./Log.css\";\r\n\r\nconst AddLog = () => {\r\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\r\n  const [enteredBody, setEnteredBody] = useState(\"\");\r\n  const [enteredUserId, setEnteredUserId] = useState(\"\");\r\n  const [submitedSuccess, setSubmitedSuccess] = useState(false);\r\n  const [formValid, setFormValid] = useState(false);\r\n  const [error, setError] = useState(false);\r\n\r\n  const titleInputChangeHandler = (event) => {\r\n    setEnteredTitle(event.target.value);\r\n    formValidation();\r\n  };\r\n\r\n  const bodyInputChangeHandler = (event) => {\r\n    setEnteredBody(event.target.value);\r\n    formValidation();\r\n  };\r\n\r\n  const userIdInputChangeHandler = (event) => {\r\n    setEnteredUserId(event.target.value);\r\n    formValidation();\r\n  };\r\n\r\n  const titleInputBlurHandler = (event) => {\r\n    setFormValid(false);\r\n    setSubmitedSuccess(false);\r\n    formValidation();\r\n  };\r\n  const bodyInputBlurHandler = (event) => {\r\n    setFormValid(false);\r\n    setSubmitedSuccess(false);\r\n    formValidation();\r\n  };\r\n  const userIdInputBlurHandler = (event) => {\r\n    setFormValid(false);\r\n    setSubmitedSuccess(false);\r\n    formValidation();\r\n  };\r\n\r\n  const formSubmissionHandler = (event) => {\r\n    event.preventDefault();\r\n    const Log = new LogObj(enteredUserId, enteredTitle, enteredBody);\r\n    addLogToServer(Log);\r\n    setEnteredTitle(\"\");\r\n    setEnteredUserId(\"\");\r\n    setEnteredBody(\"\");\r\n    setSubmitedSuccess(false);\r\n    setFormValid(false);\r\n  };\r\n\r\n  const formValidation = () => {\r\n    if (!(enteredTitle === \"\" || enteredUserId === \"\" || enteredBody === \"\")) {\r\n      setFormValid(true);\r\n    } else {\r\n      setFormValid(false);\r\n    }\r\n  };\r\n\r\n  const responseBack = (resp) => {\r\n    if (\r\n      resp.title === enteredTitle &&\r\n      resp.userId === enteredUserId &&\r\n      resp.body === enteredBody\r\n    ) {\r\n      setSubmitedSuccess(true);\r\n    } else {\r\n      setError(true);\r\n    }\r\n  };\r\n\r\n  const addLogToServer = async (log) => {\r\n    await fetch(`https://jsonplaceholder.typicode.com/posts`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        title: log.title,\r\n        body: log.body,\r\n        userId: log.userId,\r\n      }),\r\n      headers: {\r\n        \"Content-type\": \"application/json; charset=UTF-8\",\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((json) => responseBack(json));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex-form\">\r\n        <form onSubmit={formSubmissionHandler}>\r\n          <div className=\"form\">\r\n            <div className=\"H1\">Add new Log</div>\r\n            <div className=\"H1\">\r\n              <Link to=\"/\">\r\n                <Button name=\"X\" size=\"Button Button-Small\"></Button>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n          <div className=\"control-group\">\r\n            <div className=\"form-control\">\r\n              <label htmlFor=\"name\">User Id</label>\r\n              <input\r\n                type=\"number\"\r\n                id=\"UserId\"\r\n                onChange={userIdInputChangeHandler}\r\n                onBlur={userIdInputBlurHandler}\r\n                value={enteredUserId}\r\n              />\r\n            </div>\r\n            <div className=\"form-control\">\r\n              <label htmlFor=\"name\">Title</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"Title\"\r\n                onChange={titleInputChangeHandler}\r\n                onBlur={titleInputBlurHandler}\r\n                value={enteredTitle}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"form-control\">\r\n            <label htmlFor=\"name\">Body</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"Body\"\r\n              onChange={bodyInputChangeHandler}\r\n              onBlur={bodyInputBlurHandler}\r\n              value={enteredBody}\r\n            />\r\n          </div>\r\n          <div className=\"form-actions\">\r\n            <Button\r\n              name=\"Submit\"\r\n              size=\"Button Button-Large\"\r\n              disabled={!formValid}\r\n            ></Button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      <div>\r\n        {submitedSuccess === true ? (\r\n          <h2>Submited succsesfully!</h2>\r\n        ) : error === true ? (\r\n          <h2>Error!</h2>\r\n        ) : (\r\n          <h2> </h2>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default AddLog;\r\n","import { Link, useParams } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Button from \"../Button/Button\";\r\n\r\nconst LogsDetail = () => {\r\n  const params = useParams();\r\n  const id = params.id;\r\n  const [Log, setLog] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getLog = async () => {\r\n      const LogFromServer = await fetchLog(id);\r\n      setLog(LogFromServer);\r\n    };\r\n    getLog();\r\n  }, [id]);\r\n\r\n  const fetchLog = async (id) => {\r\n    const res = await fetch(`https://jsonplaceholder.typicode.com/posts/${id}`);\r\n    const data = await res.json();\r\n    return data;\r\n  };\r\n\r\n  return (\r\n    <div className=\"center\">\r\n      <div className=\"flex-container\">\r\n        <div style={{ flexGrow: 1 }}>\r\n          User id\r\n          <p>{Log.userId}</p>\r\n        </div>\r\n        <div style={{ flexGrow: 1 }}>\r\n          Title\r\n          <p>{Log.title}</p>\r\n        </div>\r\n        <div style={{ flexGrow: 3 }}>\r\n          Body\r\n          <p>{Log.body}</p>\r\n        </div>\r\n      </div>\r\n      <Link to=\"/logsPages\">\r\n        <Button name=\"Back\" size=\"Button Button-Large\"></Button>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LogsDetail;\r\n","import { Link } from \"react-router-dom\";\r\nimport \"./Log.css\";\r\n\r\nconst Log = (props) => {\r\n  return (\r\n    <>\r\n      <Link to={\"/detail/\" + props.Id} className=\"link\">\r\n        <div className=\"row\">{props.Id + \" | \" + props.Title}</div>\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Log;\r\n","import Log from \"./Log\";\r\n\r\nconst Logs = ({ logs }) => {\r\n  return (\r\n    <>\r\n      {logs.map((log) => (\r\n        <Log\r\n          key={log.id}\r\n          Id={log.id}\r\n          UserId={log.userId}\r\n          Title={log.title}\r\n          Body={log.body}\r\n        />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\nexport default Logs;\r\n","import React from \"react\";\r\n\r\nconst Pagination = ({ logsPerPage, totalLogs, paginate }) => {\r\n  const pageNumbers = [];\r\n\r\n  for (let i = 1; i <= Math.ceil(totalLogs / logsPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  return (\r\n    <div className=\"center\">\r\n      <div className=\"flex-pages\">\r\n        {pageNumbers.map((number) => (\r\n          <div\r\n            className=\"page-item\"\r\n            key={number}\r\n            onClick={() => paginate(number)}\r\n          >\r\n            {number}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import { useState, useEffect } from \"react\";\r\nimport Logs from \"./Logs\";\r\nimport Pagination from \"./Pagination\";\r\nimport \"./Log.css\";\r\n\r\nconst LogsPages = () => {\r\n  const [logs, setLogs] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [logsPerPage] = useState(10);\r\n\r\n  useEffect(() => {\r\n    const getLogs = async () => {\r\n      const logsFromServer = await fetchLogs();\r\n      setLogs(logsFromServer);\r\n    };\r\n    getLogs();\r\n  }, []);\r\n\r\n  const fetchLogs = async () => {\r\n    const res = await fetch(`https://jsonplaceholder.typicode.com/posts`);\r\n    const data = await res.json();\r\n    return data;\r\n  };\r\n\r\n  const indexOfLastLog = currentPage * logsPerPage;\r\n  const indexOfFirstLog = indexOfLastLog - logsPerPage;\r\n  const currentLogs = logs.slice(indexOfFirstLog, indexOfLastLog);\r\n\r\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\r\n\r\n  return (\r\n    <div className=\"center\">\r\n      <div className=\"table\">\r\n        <Logs logs={currentLogs} />\r\n      </div>\r\n      <Pagination\r\n        logsPerPage={logsPerPage}\r\n        totalLogs={logs.length}\r\n        paginate={paginate}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LogsPages;\r\n","import \"./App.css\";\n\nimport { BrowserRouter as Router, Route, Routes, Link } from \"react-router-dom\";\n\nimport Button from \"./components/Button/Button\";\nimport AddLog from \"./components/LogsList/AddLog\";\nimport LogsDetail from \"./components/LogsList/LogsDetail\";\nimport LogsPages from \"./components/LogsList/LogsPages\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Router>\n        <div className=\"Header\">\n          <p>Data from: jsonplaceholder.typicode.com/ </p>\n          <Link to=\"/logsPages\">\n            <Button name=\"Log List\" size=\"Button Button-Large\"></Button>\n          </Link>\n          <Link to=\"/addLog\">\n            <Button name=\"Add new log\" size=\"Button Button-Large\"></Button>\n          </Link>\n          <Routes>\n            <Route path=\"/\" element={<LogsPages />} />\n            <Route path=\"/addLog\" element={<AddLog />} />\n            <Route path=\"/logsPages\" element={<LogsPages />} />\n            <Route path=\"/detail/:id\" element={<LogsDetail />} />\n          </Routes>\n        </div>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}